// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Actor", b =>
                {
                    b.Property<int>("ActorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ActorId"));

                    b.Property<DateTime>("BirthYear")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeathYear")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.HasKey("ActorId");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            ActorId = 1,
                            BirthYear = new DateTime(1968, 9, 25, 7, 0, 0, 0, DateTimeKind.Utc),
                            DeathYear = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fullname = "Will Smith",
                            Gender = 0
                        },
                        new
                        {
                            ActorId = 2,
                            BirthYear = new DateTime(1981, 4, 28, 7, 0, 0, 0, DateTimeKind.Utc),
                            DeathYear = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fullname = "Jessica Alba",
                            Gender = 1
                        },
                        new
                        {
                            ActorId = 3,
                            BirthYear = new DateTime(1981, 6, 13, 7, 0, 0, 0, DateTimeKind.Utc),
                            DeathYear = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fullname = "Chris Evans",
                            Gender = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cast", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<int>("ActorId")
                        .HasColumnType("integer");

                    b.Property<int>("CastId")
                        .HasColumnType("integer");

                    b.HasKey("MovieId", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("Casts");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            ActorId = 1,
                            CastId = 1
                        },
                        new
                        {
                            MovieId = 2,
                            ActorId = 2,
                            CastId = 2
                        },
                        new
                        {
                            MovieId = 2,
                            ActorId = 3,
                            CastId = 3
                        },
                        new
                        {
                            MovieId = 3,
                            ActorId = 3,
                            CastId = 4
                        },
                        new
                        {
                            MovieId = 4,
                            ActorId = 2,
                            CastId = 5
                        });
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Title = "Action"
                        },
                        new
                        {
                            CategoryId = 2,
                            Title = "Comedy"
                        },
                        new
                        {
                            CategoryId = 3,
                            Title = "Fantasy"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MovieId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("MovieYear")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MovieId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            CategoryId = 2,
                            MovieYear = new DateTime(2006, 12, 15, 7, 0, 0, 0, DateTimeKind.Utc),
                            Title = "In pursuit of Happiness"
                        },
                        new
                        {
                            MovieId = 2,
                            CategoryId = 1,
                            MovieYear = new DateTime(2005, 7, 8, 7, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Fantastic Four"
                        },
                        new
                        {
                            MovieId = 3,
                            CategoryId = 1,
                            MovieYear = new DateTime(2015, 7, 19, 7, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Captain America"
                        },
                        new
                        {
                            MovieId = 4,
                            CategoryId = 3,
                            MovieYear = new DateTime(2001, 3, 30, 7, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Spy Kids"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Cast", b =>
                {
                    b.HasOne("Domain.Entities.Actor", "Actor")
                        .WithMany("Casts")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Movie", "Movie")
                        .WithMany("Casts")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Domain.Entities.Movie", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Movies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.Actor", b =>
                {
                    b.Navigation("Casts");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Domain.Entities.Movie", b =>
                {
                    b.Navigation("Casts");
                });
#pragma warning restore 612, 618
        }
    }
}
